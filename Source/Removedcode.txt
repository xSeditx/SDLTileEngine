


==========================================================================================================================================================
==========================================================================================================================================================
==========================================================================================================================================================
==========================================================================================================================================================

==========================================================================================================================================================

==========================================================================================================================================================

==========================================================================================================================================================

==========================================================================================================================================================


==========================================================================================================================================================
	void Update();
void TileRender::Update()
{
}

void TileRender::Spawn(int index, int x, int y)
{
	BatchTile *newtile = new BatchTile(index, x, y);
	newtile->CollisionBox = new AABB(Vec2(x,y), Vec2(64,64));
	BatchedList.push_back(*newtile);
}

struct BatchTile
{
	BatchTile(int index, int x, int y)
		 :TileID(index), Position(x, y)
	{}
	int TileID;
	Vec2 Position;
	AABB *CollisionBox;
};
//	std::vector<BatchTile> BatchedList;
==========================================================================================================================================================

void TileRender::Render()
{
	for (auto &B : BatchedList)
	{
		Tile T = TileList[B.TileID];

		SDL_Rect srcrect = { T.PictureArea.x,
			T.PictureArea.y,
			T.PictureArea.w,
			T.PictureArea.h };

		SDL_Rect dstrect = { B.Position.x,
			B.Position.y ,
			T.PictureArea.w,
			T.PictureArea.h };

		SDL_RenderCopy(SCREEN->Renderer, TileSheet.GetTexture(), &srcrect, &dstrect);
	}
}


==========================================================================================================================================================

//  int Xpos = 0, 
//  	Ypos = 0;
//  
//  for_loop(Index, (SizeX * SizeY))
//  {
//  	Tiles.Spawn(rand() % 15, rand() % 655, rand() % 855);
//  	Xpos += 64;
//  	if (Xpos / 64 == WorldWidth) { Xpos = 0; Ypos += 64; }
//  }
==========================================================================================================================================================

	for (auto& E : Enemy::EnemyList)
	{
		E.Update();
	}
	Tiles.Update();
	Player1.CollisionBox->Update();
	Player1.Position = Player1.CollisionBox->Position;
	Camera.Position = Player1.Position;

==========================================================================================================================================================

	for (auto &C : BatchedList)
	{
		C.CollisionBox->Update();
    }


==========================================================================================================================================================

// float StartX = ((Camera.Position.x + (SCREENWIDTH  * .5)) / (float)TileSizeX),
//       StartY = ((Camera.Position.y + (SCREENHEIGHT * .5)) / (float)TileSizeY);
// 
//float EndY = (StartY + SCREENHEIGHT), 
//	  EndX = (StartX + SCREENWIDTH);
==========================================================================================================================================================
